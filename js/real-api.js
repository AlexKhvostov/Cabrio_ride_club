/**
 * Real API Client –¥–ª—è CabrioRide Dashboard
 * –ó–∞–º–µ–Ω—è–µ—Ç mock API –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–µ—Ä–≤–µ—Ä—É
 */

class RealAPI {
    constructor() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const isDevelopment = window.location.hostname === 'localhost' || 
                             window.location.hostname === '127.0.0.1' ||
                             window.location.protocol === 'file:';
        
        this.baseUrl = isDevelopment 
            ? 'https://club.cabrioride.by/backend/api.php'  // –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            : 'backend/api.php';                           // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        
        console.log(`üîß API Mode: ${isDevelopment ? 'Development (Remote)' : 'Production (Local)'}`);
        console.log(`üåê API URL: ${this.baseUrl}`);
    }

    async makeRequest(action, data = null) {
        try {
            const url = `${this.baseUrl}?action=${action}`;
            const options = {
                method: data ? 'POST' : 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            };

            if (data) {
                options.body = JSON.stringify(data);
            }

            const response = await fetch(url, options);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }

            return result;
        } catch (error) {
            console.error(`API Error (${action}):`, error);
            throw error;
        }
    }

    async getStats() {
        return await this.makeRequest('stats');
    }

    async getMembers() {
        const result = await this.makeRequest('members');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (result.data) {
            result.data = result.data.map(member => {
                // URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ API, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                if (member.status === '–±–µ–∑ –∞–≤—Ç–æ') {
                    member.status = '—É—á–∞—Å—Ç–Ω–∏–∫';
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                if (!member.message_count) {
                    member.message_count = 0;
                }
                
                return member;
            });
        }
        
        return result;
    }

    async getCars() {
        const result = await this.makeRequest('cars');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        if (result.data) {
            result.data = result.data.map(car => {
                // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ API, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if (!car.owner_name && car.member_id) {
                    car.owner_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                }
                
                return car;
            });
        }
        
        return result;
    }

    async getInvitations() {
        const result = await this.makeRequest('invitations');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        if (result.data) {
            result.data = result.data.map(invitation => {
                // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ API, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const statusMap = {
                    '–Ω–æ–≤–æ–µ': '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                    '–Ω–∞ —Å–≤—è–∑–∏': '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                    '–≤—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞': '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                    '–≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞': '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                    '–≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±': '–≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±',
                    '–æ—Ç–∫–∞–∑': '–æ—Ç–∫–∞–∑'
                };
                
                if (statusMap[invitation.status]) {
                    invitation.status = statusMap[invitation.status];
                }
                
                return invitation;
            });
        }
        
        return result;
    }

    async getEvents() {
        const result = await this.makeRequest('events');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π
        if (result.data) {
            result.data = result.data.map(event => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                if (event.photos) {
                    try {
                        const photos = JSON.parse(event.photos);
                        if (Array.isArray(photos)) {
                            event.photos = JSON.stringify(photos.map(photo => {
                                if (!photo.startsWith('http') && !photo.startsWith('uploads/')) {
                                    return `uploads/events/${photo}`;
                                }
                                return photo;
                            }));
                        }
                    } catch (e) {
                        console.warn('Error parsing event photos:', e);
                    }
                }
                
                return event;
            });
        }
        
        return result;
    }

    async getServices() {
        const result = await this.makeRequest('services');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        if (result.data) {
            result.data = result.data.map(service => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                if (service.photos) {
                    try {
                        const photos = JSON.parse(service.photos);
                        if (Array.isArray(photos)) {
                            service.photos = JSON.stringify(photos.map(photo => {
                                if (!photo.startsWith('http') && !photo.startsWith('uploads/')) {
                                    return `uploads/services/${photo}`;
                                }
                                return photo;
                            }));
                        }
                    } catch (e) {
                        console.warn('Error parsing service photos:', e);
                    }
                }
                
                return service;
            });
        }
        
        return result;
    }

    async verifyUser(userData) {
        return await this.makeRequest('verify_user', userData);
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
window.realAPI = new RealAPI();

// –ù–ï –∑–∞–º–µ–Ω—è–µ–º mockAPI –Ω–∞ realAPI, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
// window.mockAPI = window.realAPI;

console.log('üîÑ Real API initialized - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö!'); 